general

ivy stuff
	mvnrepository.com has libraries that can be added with ivy
	the dependency code can be copied from the site and then the dependency can be added to the ivy.xml file
	"ant resolve" resolves the dependencies adding all the libraries to the project (in the lib folder)
	eclipse might need to be reconfiqured
		first refresh
		then add the new libraries to the build path (and removing old ones if needed, they need to be removed if they are marked with red)

sky cave general
	3 abstractions: player, cave and room
	marshalling convert from internal format to one we can send with inter-process communication (IPC)
	Point3 is a position object
	.cpf files are used to determine which configurations to use, can set the abstractfactories
	PlayerServant objects are created on login in the CaveServant


###################################################################
iteration 0 exercises:
-------------------------------------------------------------------
'cave-architecture'

local.cpf
	set ups inter process communication
	server is a test double, everything runs locally
	with this configuration the ClientRequestHandler (AllTestDoubleRequestHandler) calls the invoker directly, which means we skip the step of the ServerRequestHandler and no ICP is done.

full trace of look (getting room description) [Paper title: Communication]:
	look
	1: get request object with method key "GET_SHORT_ROOM_DESCRIPTION_METHOD_KEY"
	2: retrieve request object
	3: call requestAndAwaitReply on the ClientCommon static class, which calls sendRequestAndBlockUntillReply on the ClientRequestHandler which is an instance variable in the PlayerProxy

	4: IPC with server, specifically the ServerRequestHandler created by the ServerFactory, this calls the readMessageAndDispatch method in the ServerRequestHandler
	5:  parse the input into a JSON object using the parse method on the parser instance variable (instance of the JSONParser class)

	6: calls handleRequest on the invoker (the invoker is gotten from the objectManager instance (instance of ObjectManager) with the getInvoker method) the request (in json format) is given as an argument
	7: demarshall the jsonobject and save the information into variables. This includes: playerID, sessionId, methodKey...
	8: create dispatcher with the methodKey, which dispatcher to use depends on the prefix of the methodKey, in the GET_SHORT_ROOM_DESCRIPTION the prefix is PLAYER_TYPE_PREFIX. If the prefix is valid we call the dispatch method on the dispatcher (PlayerDisPatcher class, becuase of the PLAYER_TYPE_PREFIX)
	9: get the player (PlayerServant) object from the playerID and verify the session is the same
	10: call method on the player depending on the method key. In this instance we call getShortRoomDescription to get the description of the current room.
	11: reply is returned from the dispatcher
	12: reply is returned from the invoker
	13: reply is returned to the ClientRequestHandler with out.println
	14: get reply and parse it, then return it
	15: demarshall and get the return value and save it as a string.

	*in the local.cpf configuration there is no step 4 and 5 the ClientRequestHandler calls the invoker directly

1. trace [Paper title: Trace 1]:
	Steps betweens PlayerProxy and PlayerServant are omitted, as they are the same for all player methods as the above

	comparisons to broker:
		the PlayerProxy and PlayerProxy both implement the Player interface
		Marshalling creates the request objects
		SocketClientRequestHandler sends the information to the ServerRequestHandler
			in the local.cpf configuarion this role is also taken by the ClientRequestHandler
		The invoker handles the request by calling the dispatcher, it also demarshall the call
		the dispatcher calls the methods on the Servant, in a sence the Invoker in Broker is the Invoker and Dispatcher in SkyCave (the Invoker role is split into 2)

2. JSON format
	the json format consists of 5 attribute which are put in in the createRequestObject method of the Marshalling class
	the attributes are:
		player id
		session id
		version number
		method key (used to determine which method the client is calling on the server)
		parameters for the method to be called
	the method keys are of 2 types player and cave, which are determined by the prefixes "player-" and "cave-"
	there are also keys for the return values, which are used to determine success and errors of the operation the client is trying to execute on the server

3.
	The client side implementation is just a standin for the actual implementation. Every method call to it makes it call the equivelant method on the server
	The Server side implementation of the player actually does the methods and alters the game state, for example the move method actually moves the player to a new room.

4.
	The ClientRequestHandler acts as both the Client- and ServerRequestHandler and  calls the invoker directly
		it also sets up the factory that configures the server
		the invoker and dispatcher are the normal ones
		The Client and Server are connected via regular method calls locally

5.
	FakeCaveStorage  for CaveStorage
		hashmap of positions as keys and rooms as values
		comes with 5 premade rooms

	TestStubSubscriptionService for SubscriptionService
		has the mikkel, magnus & mathilde users in a hashmap, where they can be looked up

	TestStubWeatherService for WeatherService
		always returns the same hardcoded data

	NullServerRequestHandler for ServerRequestHandler
		does nothing in every method, role is handled by ClientRequestHandler instead

	SimpleInMemoryCache for PlayerSessionCache
		uses hashmaps for storage

	NullInspector for Inspector
		does nothing in every method

Daemon:
1.
	see the full look trace (step 4 and 5 are not omitted this time)
	trace 1 stills hows communication between PlayerProxy and PlayerServant
	note this configuration always logs in as Mikkel

2.
	they communicate by using the socket as an Input/OutputStream
	exceptions are not handled properly (as commented by BÃ¦rbak)
	host and port number are gotten from the configuration files (.cpf)

-------------------------------------------------------------------
Exercise 'cave-testing'

test cases review:
	uses a local configuration like local.cpf with the ClientRequestHandler called LocalMethodCallClientRequestHandler

	client:
		tests server response, valid moves should return a true boolean
		Also tests failure cases

	server:
		tests with multiple different users, cant have the same multiple times
		tests all kinds of player movement

coverage:
	no failed login test
	no failed logout test
	no player session expired test
	player equals not tested

	a lot of the weak spots have got to do with connection failures, where a saboteur would be needed (implementing this is probably a learning goal)

-------------------------------------------------------------------
Exercise 'ivy'

ivy.xml
	ivy.xml lists where to get the needed libraries
	ant resolve retrieves all the dependencies listed in ivy.xml
	ant report generates a html webpage with information about the dependencies
-------------------------------------------------------------------
Exercise 'logging'

	logging is handled by an external library, LoggerFactory.
	when the logger is gotten, the type of the class is told, so we can read what class it logged from
		example: "logger = LoggerFactory.getLogger(StandardInvoker.class);"

	logging statements are placed in failure states.

	I don't understand the setup of the log4j.properties, other than it seems it writes to a file, which is the skycave.log


-------------------------------------------------------------------
Exercise 'configuration'

	the objectManager is given a factory from the propertyreader, which reads from the .cpf file
	the objectManager contains all the objects the server needs to reference, so that they are all accesible from a single object.


-------------------------------------------------------------------
Exercise 'inspecting'

the inspector is meant for writing to something (maybe a file), so that it can be read from the outside

1. In the objectmanager the inspector could be used to specify the specific configuration of Servant, Invoker, etc.

2. "execute InspectCommand read ipc", didn't work where do I write it?

3. ???

4. TODO make in group (requires writing code)


-------------------------------------------------------------------
Exercise 'weather-client'

server needed to handle the weather method key
and call getWeather on the playerServant
playerProxy call is like the getPosition


-------------------------------------------------------------------


###################################################################
Exercise 'image-classic'

we run:
docker run hello-world

which validates the installation by contacting the hub.docker, downloading the image and starting the container 
(Notes: BIOS should enable hyper-V and service is started on linux by running sudo service docker start)

containers is browsed via 'docker ps -a' and is saved by running 'docker commit [container ID] [commit name]' which we choose to 'css-14-init'.

Add entry-point.sh script, that you can invoke from outside off docker and choose role for container (daemon/cmd)

Made containers run on same network, and talk together.
-------------------------------------------------------------------

